{
  "Comment": "A description of my state machine",
  "StartAt": "Invoke Check Session",
  "States": {
    "Invoke Check Session": {
      "Type": "Task",
      "Next": "Is Session Valid?",
      "Parameters": {
        "StateMachineArn": "${CheckSessionStateMachineArn}",
        "Input.$": "States.JsonToString($)"
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultSelector": {
        "sessionId.$": "$$.Execution.Input.sessionId",
        "nino.$": "$$.Execution.Input.nino",
        "sessionCheck.$": "States.StringToJson($.Output)"
      }
    },
    "Is Session Valid?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.sessionCheck.status",
          "StringMatches": "SESSION_OK",
          "Next": "Fetch SSM Parameters"
        }
      ],
      "Default": "Err: Invalid Session"
    },
    "Fetch SSM Parameters": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SsmParametersFunction}",
        "Payload": {
          "parameters.$": "States.Array(States.Format('/check-hmrc-cri-api/OtgUrl/{}', $.sessionCheck.clientId), '/${CommonStackName}/PersonIdentityTableName', '${UserAgent}', '/${CommonStackName}/SessionTableName', States.Format('/check-hmrc-cri-api/NinoCheckUrl/{}', $.sessionCheck.clientId), '/${CommonStackName}/verifiable-credential/issuer')",
          "govJourneyId.$": "$.sessionCheck.userAuditInfo.govuk_signin_journey_id"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Query User Attempts",
      "ResultPath": "$.parameters",
      "ResultSelector": {
        "OtgUrl.$": "$.Payload[0].Value",
        "PersonIdentityTableName.$": "$.Payload[1].Value",
        "UserAgent.$": "$.Payload[2].Value",
        "SessionTableName.$": "$.Payload[3].Value",
        "CheckUrl.$": "$.Payload[4].Value",
        "Issuer.$": "$.Payload[5].Value"
      }
    },
    "Err: Invalid Session": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "httpStatus": 400
      }
    },
    "Query User Attempts": {
      "Type": "Task",
      "Next": "User has attempts?",
      "Parameters": {
        "TableName": "${UserAttemptsTable}",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.check-attempts-exist"
    },
    "User has attempts?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-attempts-exist.Count",
          "NumericGreaterThan": 0,
          "Next": "User has more than 2 attempts?"
        }
      ],
      "Default": "Query Person Identity Table"
    },
    "User has more than 2 attempts?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-attempts-exist.Count",
          "NumericGreaterThanEquals": 2,
          "Next": "Err: Attempts exceeded"
        }
      ],
      "Default": "Query Person Identity Table"
    },
    "Err: Attempts exceeded": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "httpStatus": 200,
        "body": "{\"requestRetry\":false}"
      }
    },
    "Query Person Identity Table": {
      "Type": "Task",
      "Next": "User Exists?",
      "Parameters": {
        "TableName.$": "$.parameters.PersonIdentityTableName",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.userInfo"
    },
    "User Exists?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.userInfo.Count",
              "NumericGreaterThan": 0
            },
            {
              "And": [
                {
                  "Variable": "$.userInfo.Items[0].names",
                  "IsPresent": true
                },
                {
                  "Variable": "$.userInfo.Items[0].birthDates.L[0].M.value.S",
                  "IsPresent": true
                }
              ]
            }
          ],
          "Next": "Call OTG API"
        }
      ],
      "Default": "Err: No user found in Person Identity"
    },
    "Call OTG API": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OTGFunction}",
        "Payload": {
          "apiURL.$": "$.parameters.OtgUrl",
          "govJourneyId.$": "$.sessionCheck.userAuditInfo.govuk_signin_journey_id"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Audit Event Request Sent",
      "ResultPath": "$.otg"
    },
    "Err: No user found in Person Identity": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "httpStatus": 500
      }
    },
    "Audit Event Request Sent": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "auditPrefix": "${AuditEventPrefix}",
              "user.$": "$.sessionCheck.userAuditInfo",
              "deviceInformation.$": "$.sessionCheck.txmaAuditHeader",
              "nino.$": "$.nino",
              "userInfoEvent.$": "$.userInfo",
              "issuer.$": "$.parameters.Issuer"
            },
            "DetailType": "${AuditEventNameRequestSent}",
            "EventBusName": "${CheckHmrcEventBus}",
            "Source": "${CheckHmrcEventBusSource}"
          }
        ]
      },
      "Next": "Call Matching API",
      "ResultPath": null
    },
    "Call Matching API": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${MatchingFunctionArn}",
        "Payload": {
          "sessionId.$": "$.sessionId",
          "nino.$": "$.nino",
          "userDetails": {
            "names.$": "$.userInfo.Items[0].names",
            "dob.$": "$.userInfo.Items[0].birthDates.L[0].M.value.S"
          },
          "userAgent.$": "$.parameters.UserAgent",
          "apiURL.$": "$.parameters.CheckUrl",
          "oAuthToken.$": "$.otg.Payload.token",
          "user.$": "$.sessionCheck.userAuditInfo",
          "userInfo.$": "$.userInfo"
        }
      },
      "Next": "Store txn",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Err: Matching Lambda Exception"
        }
      ],
      "ResultSelector": {
        "payload.$": "$.Payload"
      },
      "ResultPath": "$.hmrc_response",
      "Retry": [
        {
          "ErrorEquals": ["States.ALL"],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3
        }
      ]
    },
    "Err: Matching Lambda Exception": {
      "Type": "Fail"
    },
    "Store txn": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName.$": "$.parameters.SessionTableName",
        "Key": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          }
        },
        "UpdateExpression": "SET txn = :txn",
        "ExpressionAttributeValues": {
          ":txn": {
            "S.$": "$.hmrc_response.payload.txn"
          }
        }
      },
      "Next": "Format txn for audit event",
      "ResultPath": null
    },
    "Format txn for audit event": {
      "Type": "Pass",
      "Next": "Audit Event Response Received",
      "InputPath": "$.hmrc_response.payload.txn",
      "ResultPath": "$.audit.evidence.txn"
    },
    "Audit Event Response Received": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "auditPrefix": "${AuditEventPrefix}",
              "user.$": "$.sessionCheck.userAuditInfo",
              "deviceInformation.$": "$.sessionCheck.txmaAuditHeader",
              "issuer.$": "$.parameters.Issuer",
              "evidence.$": "States.Array($.audit.evidence)"
            },
            "DetailType": "${AuditEventNameResponseReceived}",
            "EventBusName": "${CheckHmrcEventBus}",
            "Source": "${CheckHmrcEventBusSource}"
          }
        ]
      },
      "Next": "Successful match?",
      "ResultPath": null
    },
    "Successful match?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.hmrc_response.payload.status",
          "StringEquals": "200",
          "Next": "Store Successful Attempt"
        }
      ],
      "Default": "Contains Error?"
    },
    "Store Successful Attempt": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${UserAttemptsTable}",
        "Item": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          },
          "timestamp": {
            "S.$": "$$.State.EnteredTime"
          },
          "status": {
            "N.$": "$.hmrc_response.payload.status"
          },
          "attempt": {
            "S": "PASS"
          },
          "ttl": {
            "N.$": "$.sessionCheck.sessionExpiry"
          }
        }
      },
      "Next": "Fetch Auth Code Expiry",
      "ResultPath": null
    },
    "Contains Error?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.hmrc_response.payload.status",
              "StringEquals": "401"
            },
            {
              "Variable": "$.hmrc_response.payload.body.errors",
              "IsPresent": true
            }
          ],
          "Next": "Store Failed Match Attempt"
        },
        {
          "Variable": "$.hmrc_response.payload.status",
          "StringEquals": "424",
          "Next": "Store Deceased Attempt"
        },
        {
          "Next": "Err: Failed Auth",
          "And": [
            {
              "Variable": "$.hmrc_response.payload.body.code",
              "IsPresent": true
            },
            {
              "Variable": "$.hmrc_response.payload.body.code",
              "StringEquals": "INVALID_CREDENTIALS"
            }
          ]
        }
      ],
      "Default": "Err: API Error"
    },
    "Store Failed Match Attempt": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${UserAttemptsTable}",
        "Item": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          },
          "timestamp": {
            "S.$": "$$.State.EnteredTime"
          },
          "status": {
            "N.$": "$.hmrc_response.payload.status"
          },
          "text": {
            "S.$": "$.hmrc_response.payload.body.errors"
          },
          "attempt": {
            "S": "FAIL"
          },
          "ttl": {
            "N.$": "$.sessionCheck.sessionExpiry"
          }
        }
      },
      "Next": "Was this the users last attempt?",
      "ResultPath": "$.saveFailedAttempt"
    },
    "Was this the users last attempt?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-attempts-exist.Count",
          "NumericGreaterThanEquals": 1,
          "Next": "Fetch Auth Code Expiry"
        }
      ],
      "Default": "Send Retry"
    },
    "Send Retry": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "httpStatus": 200,
        "body": "{\"requestRetry\":true}"
      }
    },
    "Fetch Auth Code Expiry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "govJourneyId.$": "$.sessionCheck.userAuditInfo.govuk_signin_journey_id",
          "ttlValue": 10,
          "ttlUnint": "minutes"
        },
        "FunctionName": "${TimeFunctionArn}"
      },
      "Next": "Set Auth Code for Session",
      "ResultSelector": {
        "payload.$": "$.Payload.expiry"
      },
      "ResultPath": "$.expiry"
    },
    "Set Auth Code for Session": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName.$": "$.parameters.SessionTableName",
        "Key": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          }
        },
        "UpdateExpression": "SET authorizationCode = :authCode, authorizationCodeExpiryDate = :expiry",
        "ExpressionAttributeValues": {
          ":authCode": {
            "S.$": "States.UUID()"
          },
          ":expiry": {
            "N.$": "States.Format('{}',$.expiry.payload)"
          }
        }
      },
      "Next": "Save NINO & sessionId to nino-users table",
      "ResultPath": "$.setAuthCode"
    },
    "Save NINO & sessionId to nino-users table": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${NinoUsersTable}",
        "Item": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          },
          "nino": {
            "S.$": "$$.Execution.Input.nino"
          },
          "ttl": {
            "N.$": "$.sessionCheck.sessionExpiry"
          }
        }
      },
      "Next": "Response Filtering",
      "ResultPath": "$.saveUser"
    },
    "Response Filtering": {
      "Type": "Pass",
      "Next": "Nino check completed",
      "Parameters": {
        "httpStatus": 200,
        "body": "{\"requestRetry\":false}"
      }
    },
    "Nino check completed": {
      "Type": "Succeed"
    },
    "Err: API Error": {
      "Type": "Fail"
    },
    "Err: Failed Auth": {
      "Type": "Fail"
    },
    "Store Deceased Attempt": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${UserAttemptsTable}",
        "Item": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          },
          "timestamp": {
            "S.$": "$$.State.EnteredTime"
          },
          "status": {
            "N.$": "$.hmrc_response.payload.status"
          },
          "text": {
            "S.$": "$.hmrc_response.payload.body"
          },
          "attempt": {
            "S": "FAIL"
          },
          "ttl": {
            "N.$": "$.sessionCheck.sessionExpiry"
          }
        }
      },
      "Next": "Was this the users last attempt?",
      "ResultPath": "$.saveFailedAttempt"
    }
  }
}
